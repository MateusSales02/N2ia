# -*- coding: utf-8 -*-
"""Ex3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BX5gAPrcXhmmXVbGV7fXp7wPMHXf2BZE
"""

!pip install scikit-fuzzy deap matplotlib tensorflow

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from deap import base, creator, tools
import random
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers

angle = ctrl.Antecedent(np.arange(-180, 181, 1), 'angle')
velocity = ctrl.Antecedent(np.arange(-10, 11, 1), 'velocity')
force = ctrl.Consequent(np.arange(-10, 11, 1), 'force')

angle['neg'] = fuzz.trimf(angle.universe, [-180, -180, 0])
angle['zero'] = fuzz.trimf(angle.universe, [-180, 0, 180])
angle['pos'] = fuzz.trimf(angle.universe, [0, 180, 180])

velocity['neg'] = fuzz.trimf(velocity.universe, [-10, -10, 0])
velocity['zero'] = fuzz.trimf(velocity.universe, [-10, 0, 10])
velocity['pos'] = fuzz.trimf(velocity.universe, [0, 10, 10])

force['neg'] = fuzz.trimf(force.universe, [-10, -10, 0])
force['zero'] = fuzz.trimf(force.universe, [-10, 0, 10])
force['pos'] = fuzz.trimf(force.universe, [0, 10, 10])

rules = [
    ctrl.Rule(angle['neg'] & velocity['neg'], force['pos']),
    ctrl.Rule(angle['neg'] & velocity['zero'], force['pos']),
    ctrl.Rule(angle['neg'] & velocity['pos'], force['zero']),
    ctrl.Rule(angle['zero'] & velocity['neg'], force['pos']),
    ctrl.Rule(angle['zero'] & velocity['zero'], force['zero']),
    ctrl.Rule(angle['zero'] & velocity['pos'], force['neg']),
    ctrl.Rule(angle['pos'] & velocity['neg'], force['zero']),
    ctrl.Rule(angle['pos'] & velocity['zero'], force['neg']),
    ctrl.Rule(angle['pos'] & velocity['pos'], force['neg'])
]

pendulum_ctrl = ctrl.ControlSystem(rules)
pendulum_sim = ctrl.ControlSystemSimulation(pendulum_ctrl)

def collect_training_data(num_samples):
    X = []
    y = []
    for _ in range(num_samples):
        angle_value = random.uniform(-180, 180)
        velocity_value = random.uniform(-10, 10)
        pendulum_sim.input['angle'] = angle_value
        pendulum_sim.input['velocity'] = velocity_value
        pendulum_sim.compute()

        X.append([angle_value, velocity_value])
        y.append(pendulum_sim.output['force'])
    return np.array(X), np.array(y)

X_train, y_train = collect_training_data(1000)

model = keras.Sequential([
    layers.Dense(16, activation='relu', input_shape=(2,)),
    layers.Dense(16, activation='relu'),
    layers.Dense(1)
])

model.compile(optimizer='adam', loss='mse')

model.fit(X_train, y_train, epochs=50, verbose=1)

def test_neuro_fuzzy(num_tests):
    successes = 0
    for _ in range(num_tests):
        angle_value = random.uniform(-180, 180)
        velocity_value = random.uniform(-10, 10)
        pendulum_sim.input['angle'] = angle_value
        pendulum_sim.input['velocity'] = velocity_value
        pendulum_sim.compute()

        nn_prediction = model.predict(np.array([[angle_value, velocity_value]]))

        if np.isclose(nn_prediction[0][0], pendulum_sim.output['force'], atol=1.0):
            successes += 1

    accuracy = successes / num_tests
    return accuracy

accuracy = test_neuro_fuzzy(100)
print(f"Precis√£o do Sistema Neuro-Fuzzy: {accuracy * 100:.2f}%")