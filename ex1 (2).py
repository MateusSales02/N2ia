# -*- coding: utf-8 -*-
"""EX1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G-r8FW8rQYdH_dJMeWcCTyIAw98OUisA
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

angle = ctrl.Antecedent(np.arange(-90, 91, 1), 'angle')
angular_velocity = ctrl.Antecedent(np.arange(-100, 101, 1), 'angular_velocity')
position = ctrl.Antecedent(np.arange(-10, 11, 1), 'position')
linear_velocity = ctrl.Antecedent(np.arange(-5, 6, 1), 'linear_velocity')

force = ctrl.Consequent(np.arange(-100, 101, 1), 'force')

angle['left'] = fuzz.trimf(angle.universe, [-90, -45, 0])
angle['vertical'] = fuzz.trimf(angle.universe, [-10, 0, 10])
angle['right'] = fuzz.trimf(angle.universe, [0, 45, 90])

angular_velocity['left'] = fuzz.trimf(angular_velocity.universe, [-100, -50, 0])
angular_velocity['stopped'] = fuzz.trimf(angular_velocity.universe, [-10, 0, 10])
angular_velocity['right'] = fuzz.trimf(angular_velocity.universe, [0, 50, 100])

position['left'] = fuzz.trimf(position.universe, [-10, -5, 0])
position['center'] = fuzz.trimf(position.universe, [-1, 0, 1])
position['right'] = fuzz.trimf(position.universe, [0, 5, 10])

linear_velocity['left'] = fuzz.trimf(linear_velocity.universe, [-5, -2.5, 0])
linear_velocity['stopped'] = fuzz.trimf(linear_velocity.universe, [-0.5, 0, 0.5])
linear_velocity['right'] = fuzz.trimf(linear_velocity.universe, [0, 2.5, 5])

force['strong_left'] = fuzz.trimf(force.universe, [-100, -75, -50])
force['left'] = fuzz.trimf(force.universe, [-50, -25, 0])
force['none'] = fuzz.trimf(force.universe, [-10, 0, 10])
force['right'] = fuzz.trimf(force.universe, [0, 25, 50])
force['strong_right'] = fuzz.trimf(force.universe, [50, 75, 100])

rule1 = ctrl.Rule(angle['left'] & angular_velocity['left'], force['strong_left'])
rule2 = ctrl.Rule(angle['left'] & angular_velocity['stopped'], force['left'])
rule3 = ctrl.Rule(angle['left'] & angular_velocity['right'], force['none'])
rule4 = ctrl.Rule(angle['vertical'] & angular_velocity['left'], force['left'])
rule5 = ctrl.Rule(angle['vertical'] & angular_velocity['stopped'], force['none'])
rule6 = ctrl.Rule(angle['vertical'] & angular_velocity['right'], force['right'])
rule7 = ctrl.Rule(angle['right'] & angular_velocity['left'], force['none'])
rule8 = ctrl.Rule(angle['right'] & angular_velocity['stopped'], force['right'])
rule9 = ctrl.Rule(angle['right'] & angular_velocity['right'], force['strong_right'])

rule10 = ctrl.Rule(position['left'] & linear_velocity['left'], force['strong_right'])
rule11 = ctrl.Rule(position['left'] & linear_velocity['stopped'], force['right'])
rule12 = ctrl.Rule(position['left'] & linear_velocity['right'], force['none'])
rule13 = ctrl.Rule(position['center'] & linear_velocity['left'], force['right'])
rule14 = ctrl.Rule(position['center'] & linear_velocity['stopped'], force['none'])
rule15 = ctrl.Rule(position['center'] & linear_velocity['right'], force['left'])
rule16 = ctrl.Rule(position['right'] & linear_velocity['left'], force['none'])
rule17 = ctrl.Rule(position['right'] & linear_velocity['stopped'], force['left'])
rule18 = ctrl.Rule(position['right'] & linear_velocity['right'], force['strong_left'])

pendulum_control = ctrl.ControlSystem([
    rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9,
    rule10, rule11, rule12, rule13, rule14, rule15, rule16, rule17, rule18
])

pendulum_simulation = ctrl.ControlSystemSimulation(pendulum_control)

pendulum_simulation.input['angle'] = -30
pendulum_simulation.input['angular_velocity'] = 10
pendulum_simulation.input['position'] = -5
pendulum_simulation.input['linear_velocity'] = 1

pendulum_simulation.compute()

print(f"For√ßa aplicada: {pendulum_simulation.output['force']}")

angle.view()
angular_velocity.view()
position.view()
linear_velocity.view()
force.view()
plt.show()